.. index:: REST API

========
REST API
========

Auto Attendant (AA)
-------------------

View AA List
~~~~~~~~~~~~

**Resource URI**: /rest/auto-attendant

**Default Resource Properties**
  The resource is represented by the following properties when the GET request is performed.

.. list-table::

  * - **Property**
    - **Description**
  * - *autoattendant*
    - The items displayed in the list
  * - *name*
    - Auto attendant name
  * - *systemId*
    - System ID
  * - *specialSelected*
    - Determines whether the AA is active or not.

**Specific Response Codes:** N/A

**HTTP Method:** GET
  Retrieves the list of auto-attendants configured.

**Example**::

  # curl -k -X GET https://superadmin:password@192.168.1.31/sipxconfig/rest/auto-attendant/
  <autoAttendants>
    <autoAttendant>
      <name>Operator</name>
      <systemId>operator</systemId>
      <specialSelected>false</specialSelected>
    </autoAttendant>
    <autoAttendant>
      <name>After hours</name>
      <systemId>afterhour</systemId>
      <specialSelected>false</specialSelected>
    </autoAttendant>

**Unsupported HTTP Methods:** POST, PUT, DELETE

View or modify AA special mode
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

**Resource URI:** /rest/auto-attendant/specialmode

**Default Resource Properties**
  The resource is represented by the following properties when the GET is performed:

.. list-table::

  * - **Property**
    - **Description**
  * - *specialMode*
    - The status of the AA special mode. Displays **true** if the AA is on and **false** if the AA is off.

**Specific Response Codes:** N/A

**HTTP Method:** GET
  Displays if the auto attendant is activated or not.

**Example**::

  # curl -k -X GET https://superadmin:password@192.168.1.31/sipxconfig/rest/auto-attendant/specialmode
  <specialAttendant>
    <specialMode>false</specialMode>

**HTTP Method:** PUT
  The status is set to true and the special mode is activated.

**Example**::

  # curl -k -X PUT -H "Content-Type: application/json" -d '{"specialMode":"true"}'  https://superadmin:password@192.168.1.31/sipxconfig/rest/auto-attendant/specialmode

**HTTP Method:** DELETE
  The status is set to false and the special mode is deactivated.

**Example**::

  # curl -k -X DELETE -H "Content-Type: application/json" -d '{"specialMode":"true"}'  https://superadmin:password@192.168.1.31/sipxconfig/rest/auto-attendant/specialmode

**Unsupported HTTP Methods:** POST

Setting an AA in special mode
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

**Resource URI:** /rest/auto-attendant/{attendant}/special

**Default Resource Properties** N/A

**Specific Response Codes:**
  * Error 400 - when the {attendant} is not found on PUT or DELETE.
  * Error 409 - when the special mode is true on DELETE.

**HTTP Method:** PUT
  The auto attendant is marked as special.

**HTTP Method:** DELETE
  Remove the attendant special mode.

**Unsupported HTTP Method:** GET, POST

Enable an AA
~~~~~~~~~~~~

**Resource URI:** /rest/auto-attendant/livemode/{code}

**Default Resource Properties** N/A

**Specific Response Codes:** N/A

**HTTP Method:** PUT
  The auto attendant with the specified code is enabled. Note that hte code represents the phones extension.

**HTTP Method:** DELETE
  The auto attendant with the specified code is disabled. Note that hte code represents the phones extension.

**Unsupported HTTP Method:** GET, POST

Branch
------

View or modify branches
~~~~~~~~~~~~~~~~~~~~~~~

**Resource URI:** /rest/branch

**Default Resource Properties**
  The resource is represented by the following properties when the GET request is performed.

.. list-table::

  * - **Property**
    - **Description**
  * - *totalResults*
    - The total number of results.
  * - *currentPage*
    - Number of the current page.
  * - *totalPages*
    - The number of total pages.
  * - *resultPerPage*
    - Number of results per page.
  * - *ID*
    - Unique identification number of the branch.
  * - *name*
    - Branch name
  * - *description*
    - Short description provided by the user.
  * - *address*
    - The complete address of the branch.
  * - *street*
    - The name of the street.
  * - *city*
    - The name of the city.
  * - *country*
    - The name of the country.
  * - *state*
    - The name of the state.
  * - *zip*
    - The postal zip code.
  * - *officeDesignation*
    - The mail stop field.
  * - *phoneNumber*
    - The phone number of the branch.
  * - *faxNumber*
    - The fax number of the branch.

**Specific Response Codes:**
  Error 400 - Wrong ID when updating the branch

**HTTP Method:** GET
  Retrieves a list of branches defined in the system.

**Example**::

  # curl -k -X GET https://superadmin:password@192.168.1.31/sipxconfig/rest/branch
  <branch>
    <metadata>
      <totalResults>1</totalResults>
      <currentPage>1</currentPage>
      <totalPages>1</totalPages>
      <resultsPerPage>1</resultsPerPage>
    </metadata>
    <branches>
      <branch>
        <id>1</id>
        <name>whitehouse</name>
        <description>location description field</description>
        <address>
          <id>1</id>
          <street>1600 Pennsylvania Avenue NW</street>
          <city>Washington</city>
          <country>US</country>
          <state>DC</state>
          <zip>20500</zip>
        </address>
      </branch>
    </branches>
  </branch>

**HTTP Method:** PUT
  Adds a new branch. The ID is automatically generated and any value entered is ignored.

**Example**::

  # curl -k -X PUT -H "Content-Type: application/json" -d '{"branch":{"name":"libofcongress","description":"library of congress","address":{"street":"101 Independence Ave SE","city":"Washington","state":"DC","zip":"20540"}}}'  https://superadmin:password@192.168.1.31/sipxconfig/rest/branch
  <?xml version="1.0" encoding="UTF-8"?><response><code>SUCCESS_CREATED</code><message>Created</message><data><id>3</id></data></response>

**Unsupported HTTP Method:** DELETE

View or modify a branch ID
~~~~~~~~~~~~~~~~~~~~~~~~~~

**Resource URI:** /rest/branch/{id}

**Default Resource Properties**
  The resource is represented by the following properties when the GET request is performed.

.. list-table::

  * - **Property**
    - **Description**
  * - *branch*
    - The branch information is the same as /branch

**Specific Response Codes:**
  Error 400 - wrong ID when updating the branch

**HTTP Method:** GET
  Retrieves information on the branch with the specified ID.

**Example**::

  # curl -k -X GET https://superadmin:password@192.168.1.31/sipxconfig/rest/branch/1
  <branch>
    <id>1</id>
    <name>whitehouse</name>
    <description>location description field</description>
    <address>
      <id>1</id>
      <street>1600 Pennsylvania Avenue NW</street>
      <city>Washington</city>
      <country>US</country>
      <state>DC</state>
      <zip>20500</zip>
      <officeDesignation>ovaloffice</officeDesignation>
    </address>
    <phoneNumber>4235551212</phoneNumber>
    <faxNumber>4235552323</faxNumber>
  </branch>

**HTTP Method:** PUT
  Updates the branch with the specified ID. Uses the same XML as for creation.

**HTTP Method:** DELETE
  Removes branch with the specified ID.

**Unsupported HTTP Method:** POST

DNS
---

View DNS settings
~~~~~~~~~~~~~~~~~

**Resource URI:** /api/dns/settings

**Default Resource Properties**
  The resource is represented by the following properties when the GET request is performed.

.. list-table::

  * - **Property**
    - **Description**
  * - *path*
    - Path to the setting.
  * - *type*
    - Setting type. Possible options are **string**, **boolean**, or **enum**.
  * - *options*
    - Availble setting options.
  * - *value*
    - The current selected option of the setting.
  * - *defaultValue*
    - The default value of the setting.
  * - *label*
    - The setting label.
  * - *description*
    - Short description provided by the user.

**Specific Response Codes:** N/A

**HTTP Method:** GET
  Retrieves the settings for all DNS entries in the system.

**Example**::

  # curl -k -X GET https://superadmin:password@192.168.1.31/sipxconfig/api/dns/settings
  {"settings":[{"path":"named-config/forwarders/forwarder_0","type":"string","options":null,"value":"192.168.1.31","defaultValue":null,"label":"Primary External DNS server","description":"DNS server in your company or your ITSP. Can also be a publicly available DNS server like 8.8.8.8."},{"path":"named-config/forwarders/forwarder_1","type":"string","options":null,"value":null,"defaultValue":null,"label":"Secondary External DNS server","description":"In the event the primary DNS server is unavailable, system will use this server."},{"path":"named-config/forwarders/forwarder_2","type":"string","options":null,"value":null,"defaultValue":null,"label":"Additional External DNS server","description":null},{"path":"named-config/forwarders/forwarder_3","type":"string","options":null,"value":null,"defaultValue":null,"label":"Additional External DNS server","description":null},{"path":"named-config/forwarders/forwarder_4","type":"string","options":null,"value":null,"defaultValue":null,"label":"Additional External DNS server","description":null},{"path":"acl/ips","type":"string","options":null,"value":"192.168.1.31,172.16.0.0/12,192.168.0.0/16,10.0.0.0/8,127.0.0.0/8","defaultValue":"192.168.1.31,172.16.0.0/12,192.168.0.0/16,10.0.0.0/8,127.0.0.0/8","label":"Allow Recursion ACL","description":"Groups of hosts (comma separated values of IP addresses or subnet) allowed to make recursive queries on the nameserver. <br/>Leave empty for allowing all hosts to perform recursive queries on the nameserver."},{"path":"sys/unmanaged","type":"boolean","options":null,"value":"0","defaultValue":"0","label":"Unmanaged Service","description":"Company or ITSP DNS servers to resolve ALL names instead of local DNS servers."},{"path":"sys/unmanaged_servers/unmanaged_0","type":"string","options":null,"value":null,"defaultValue":null,"label":"Primary Unmanaged DNS server","description":"DNS server in your company or your ITSP. Can also be a publicly available DNS server like 8.8.8.8."},{"path":"sys/unmanaged_servers/unmanaged_1","type":"string","options":null,"value":null,"defaultValue":null,"label":"Secondary Unmanaged DNS server","description":"In the event the primary DNS server is unavailable, system will use this server."},{"path":"sys/unmanaged_servers/unmanaged_2","type":"string","options":null,"value":null,"defaultValue":null,"label":"Additional Unmanaged DNS server","description":null},{"path":"sys/unmanaged_servers/unmanaged_3","type":"string","options":null,"value":null,"defaultValue":null,"label":"Additional Unmanaged DNS server","description":null}]}

View DNS settings from path
~~~~~~~~~~~~~~~~~~~~~~~~~~~

**Resource URI:** /api/dns/settings/{settingPath}

**Default Resource Properties**
  The resource is represented by the following properties when the GET request is performed.

.. list-table::

  * - **Property**
    - **Description**
  * - *setting*
    - The dns setting related information is similar to the one described under /dns/settings.

**Specific Response Codes:** N/A

**HTTP Method:** GET
  Retrieves the DNS settings from the speicifed path.

**Example*::


**HTTP Method:** PUT
  Updates the settings of the DNS server from the specified path. PUT data is plain text.

**HTTP Method:** DELETE
  Deletes the settings of the DNS server from the specified path.

**Unsupported HTTP Method:** POST

View DNS Advisor results
~~~~~~~~~~~~~~~~~~~~~~~~

**Resource URI:** /api/dns/advisor/server/{serverId}

**Default Resource Properties**
  The resource is represented by the following properties when the GET request is performed.

.. list-table::

  * - **Property**
    - **Description**
  * - *Missing naptr records*
    - List of the missing NAPTR records, if any.
  * - *Missing A records*
    - List of missing A records, if any.

**Specific Response Codes:** N/A

**HTTP Method:** GET
  Checks the DNS settings and if the settings are correct, no result is returned. Otherwise it retrieves the missing configurations.

**Example**::

  # curl -k -X GET https://superadmin:password@192.168.1.31/sipxconfig/api/dns/advisor/server/1

  ;; Missing naptr records
  home.mattkeys.net. IN NAPTR \d 0 "s" "SIP+D2U" "" _sip._udp
  home.mattkeys.net. IN NAPTR 1 0 "s" "SIP+D2T" "" _sip._tcp

  ;; Missing a records
  sipxcom1.home.mattkeys.net  IN A 192.168.1.31

**Unsupported HTTP Method:** PUT, POST, DELETE

Licensing (Uniteme only)
------------------------

**Resource URI:** /api/license

**Default Resource Properties** N/A

**Specific Response Codes:** N/A

View license information
~~~~~~~~~~~~~~~~~~~~~~~~

**HTTP Method:** GET
  Retrieves the current license file.

**Example**::

  # curl -k -X GET https://superadmin:password@192.168.1.14/sipxconfig/api/license/
  {"uid":"","domain":"home.mattkeys.net","version":"","expire":"03-Jan-2026","support":"","licenseType":"Deprecated OpenUC Reach","users":-1,"mobileDevices":-1,"company":"Matts Lab","contactEmail":"mkeys@email.domain","contactName":"","contactPhone":""}

Modify license UID
~~~~~~~~~~~~~~~~~~
Set the universal ID of the license.

**HTTP Method:** POST
  Used to update the license UID

**Example**::

  # curl -k -X POST https://superadmin:12345678@10.4.0.103/sipxconfig/api/license/508316691110519
  {"uid":"508316691110519","domain":"gabi.test","version":"19.08","expire":"31-Dec-2039","support":"31-Dec-2039","licenseType":"Subscription","users":500,"mobileDevices":500,"company":"developers","contactEmail":"martin.harcar@ezuce.com","contactName":"martin","contactPhone":"454614465465"}

**Unsupported HTTP Method:** PUT, DELETE

Gateways
--------

View all gateways
~~~~~~~~~~~~~~~~~

**Resource URI:** /api/gateways

**Default Resource Properties**
  The resource is prepresented by the following properties when the GET request is performed.

.. list-table::

  * - **Property**
    - **Description**
  * - *id*
    - Gateway unique identification number.
  * - *name*
    - Gateway name.
  * - *description*
    - Short description provided by the user.
  * - *model*
    - The model of the gateway.
  * - *enabled*
    - Displays **true** if enabled, **false** if it is disabled.
  * - *address*
    - The gateway IP or FQDN address.
  * - *addressPort*
    - The gateway port number.
  * - *outboundPort*
    - The gateway outbound port number.
  * - *addressTransport*
    - The transport protocol to use.
  * - *shared*
    - Displays **true** if enabled, **false** if it is not shared.
  * - *useInternalBridge*
    - Displays **true** if using sipxbridge, **false** if it is not.
  * - *anonymous*
    - Displays **true** if caller ID is blocked, **false** if it is not.
  * - *ignoreUserInfo*
    - Displays **true** if 'ignore user caller id' is enabled, **false** if it is not.
  * - *transformUserExtensions*
    - Displays **true** if 'transform extension' is enabled, **false** if it is not.
  * - *keepDigits*
    - Number of ext digits that are kept before adding the caller ID prefix.

**Specific Response Codes:** N/A

**HTTP Method:** GET
  Retrieves all the gateways defined.

**Example**::

  # curl -k -X GET https://superadmin:password@192.168.1.31/sipxconfig/api/gateways
  {"gateways":[{"id":1,"name":"my_siptrunk","serialNo":null,"deviceVersion":null,"description":"DIDs 4235550000 through 4235551000","model":{"modelId":"sipTrunkStandard","label":"SIP trunk","vendor":null,"versions":null},"enabled":true,"address":"192.168.1.14","addressPort":5060,"outboundAddress":null,"outboundPort":5060,"addressTransport":"tcp","prefix":null,"shared":true,"useInternalBridge":true,"branch":null,"callerAliasInfo":{"defaultCallerAlias":null,"anonymous":false,"ignoreUserInfo":false,"transformUserExtension":false,"addPrefix":null,"keepDigits":0,"displayName":null,"urlParameters":null}}]}

Filter gateways by model
~~~~~~~~~~~~~~~~~~~~~~~~

**Resource URI:** /api/gateways/models

**Default Resource Properties**
  The resource is represented by the following properties when the GET request is performed.

.. list-table::

  * - **Property**
    - **Description**
  * - *modelId*
    - Gateway model.
  * - *label*
    - Gateway label.
  * - *vendor*
    - Gateway model vendor.

**Specific Response Codes:** N/A

**HTTP Method:** GET
  Retrieves all gateway models available in the database.

**Example**::

  # curl -k -X GET https://superadmin:password@192.168.1.31/sipxconfig/api/gateways/models
  {"models":[{"modelId":"acmeGatewayStandard","label":"Acme 1000","vendor":"acme","versions":null},{"modelId":"audiocodesMP1X4_4_FXO","label":"AudioCodes MP114 FXO","vendor":"AudioCodes","versions":["audiocodes6.0","audiocodes5.8","audiocodes5.6","audiocodes5.4","audiocodes5.2","audiocodes5.0"]},{"modelId":"audiocodesMP1X8_8_FXO","label":"AudioCodes MP118 FXO","vendor":"AudioCodes","versions":["audiocodes6.0","audiocodes5.8","audiocodes5.6","audiocodes5.4","audiocodes5.2","audiocodes5.0"]},{"modelId":"audiocodesMediant1000","label":"AudioCodes Mediant 1000 PRI","vendor":"AudioCodes","versions":["audiocodes6.0","audiocodes5.8","audiocodes5.6","audiocodes5.4","audiocodes5.2","audiocodes5.0"]},{"modelId":"audiocodesMediant2000","label":"AudioCodes Mediant 2000 PRI","vendor":"AudioCodes","versions":["audiocodes6.0","audiocodes5.8","audiocodes5.6","audiocodes5.4","audiocodes5.2","audiocodes5.0"]},{"modelId":"audiocodesMediant3000","label":"AudioCodes Mediant 3000 PRI","vendor":"AudioCodes","versions":["audiocodes6.0","audiocodes5.8","audiocodes5.6","audiocodes5.4","audiocodes5.2","audiocodes5.0"]},{"modelId":"audiocodesMediantBRI","label":"AudioCodes Mediant 1000 BRI","vendor":"AudioCodes","versions":["audiocodes6.0","audiocodes5.8","audiocodes5.6","audiocodes5.4","audiocodes5.2","audiocodes5.0"]},{"modelId":"audiocodesTP260","label":"AudioCodes TP260","vendor":"AudioCodes","versions":["audiocodes6.0","audiocodes5.8","audiocodes5.6","audiocodes5.4","audiocodes5.2","audiocodes5.0"]},{"modelId":"genericGatewayStandard","label":"Unmanaged gateway","vendor":null,"versions":null},{"modelId":"sipTrunkStandard","label":"SIP trunk","vendor":null,"versions":null}]}

**Unsupported HTTP Method:** PUT, POST, DELETE

View or modify gateway ID
~~~~~~~~~~~~~~~~~~~~~~~~~

**Resource URI:** /gateways/{gatewayId}

**Default Resource Properties**
  The resource is represented by the following properties when the GET request is performed:

.. list-table::

  * - **Property**
    - **Description**
  * - *gateway*
    - The gateway related inforamtion is the same as the /gateways resource.

**Specific Response Codes:** N/A

**HTTP Method:** GET
  Retrieves information on the gateway with the specified ID.

**Example**::

  # curl -k -X GET https://superadmin:password@192.168.1.31/sipxconfig/api/gateways/1
  {"id":1,"name":"my_siptrunk","serialNo":null,"deviceVersion":null,"description":"DIDs 4235550000 through 4235551000","model":{"modelId":"sipTrunkStandard","label":"SIP trunk","vendor":null,"versions":null},"enabled":true,"address":"192.168.1.14","addressPort":5060,"outboundAddress":null,"outboundPort":5060,"addressTransport":"tcp","prefix":null,"shared":true,"useInternalBridge":true,"branch":null,"callerAliasInfo":{"defaultCallerAlias":null,"anonymous":false,"ignoreUserInfo":false,"transformUserExtension":false,"addPrefix":null,"keepDigits":0,"displayName":null,"urlParameters":null}}

**HTTP Method:** PUT
  Updates the gateway with the specified ID. Uses the same XML as for creation.

**Example**::

  foo


**HTTP Method:** POST
  Creates a new gateway with the specified ID.

**Example**::

  bar

**HTTP Method:** DELETE
  Removes the gateway specified by ID.

**Example**::

  foo

**Unsupported HTTP Method:** N/A

View all settings of a gateway ID
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

**Resource URI:** /api/gateways/{gatewayId}/settings

**Default Resource Properties**
  The resource is represented by the following properties when the GET request is performed:

.. list-table::

  * - **Property**
    - **Description**
  * - *path*
    - Path to the setting.
  * - *type*
    - Setting type. Possible options are **string**, **boolean**, or **enum**.
  * - *options*
    - Available setting options.
  * - *value*
    - The current selected option of the setting.
  * - *label*
    - Setting label.
  * - *description*
    - Short description provided by the user.

**Specific Response Codes:** N/A

**HTTP Method:** GET
  Retrieves settings for the specified phone models in the gateway ID.

**Example**::

  bar

**Unsupported HTTP Method:** PUT, POST, DELETE

View or modify a setting for phone models in a gateway ID
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

**Resource URI:** /api/gateways/{gatewayId}/settings/{path:.*}

**Default Resource Properties**
  The resource is represented by the following properties when the GET request is performed.

.. list-table::

  * - **Property**
    - **Description**
  * - *gateway*
    - The gateway related information is the same as the /gateways/{gatewayId} resource.

**Specific Response Codes:** N/A

**HTTP Method:** GET
  Retrieve the setting specified in the path for the phone models in the gateway ID.

**Example**::

  foo

**HTTP Method:** PUT
  Updates the setting specified in the path for the phone models in the gateway ID. PUT data is plain text.

**Example**::

  bar

**HTTP Method:** DELETE
  Deletes the setting specified in the path for the phone models in the gateway ID.

**Example**::

  foo

**Unsupported HTTP Method:** POST

View port settings for a gateway ID
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

